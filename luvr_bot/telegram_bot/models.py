import datetime

from datetime import timedelta
from django.contrib.auth.models import AbstractUser
from django.utils.html import format_html

from django.db import models
from django.contrib import admin
from django.core.validators import MinLengthValidator
from django.core.exceptions import ValidationError


from .constants import statuses_dict


class Employee(models.Model):
    phone_number = models.CharField(unique=True, max_length=11, verbose_name='–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', validators=[MinLengthValidator(3)])
    chat_id = models.IntegerField(verbose_name='ID —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç–∞', blank=True, null=True)
    INN = models.CharField(max_length=12, verbose_name='–ò–ù–ù —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', null=True, blank=True)
    full_name = models.CharField(max_length=12, verbose_name='–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', null=True, blank=True)

    class Meta:
        verbose_name = '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
        verbose_name_plural = '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'

    def __str__(self):
        return self.phone_number

    def clean(self):
        if not str(self.phone_number).isdigit():
            raise ValidationError('–ù–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä')
        elif len(self.phone_number) < 11:
            raise ValidationError('–ù–æ–º–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 11 —Ü–∏—Ñ—Ä')

    def save(self, *args, **kwargs):
        self.phone_number = '7' + self.phone_number[-10:]
        super().save(*args, **kwargs)


class EmployeeGeoPosition(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name='geo_positions', verbose_name='—Å–æ—Ç—Ä—É–¥–Ω–∏–∫')
    latitude = models.CharField(max_length=300, verbose_name='—à–∏—Ä–æ—Ç–∞')
    longitude = models.CharField(max_length=300, verbose_name='–¥–æ–ª–≥–æ—Ç–∞')
    geo_positions_date = models.DateTimeField(auto_now=True, verbose_name='–¥–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –≥–µ–æ –ø–æ–∑–∏—Ü–∏–π')

    class Meta:
        verbose_name = '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'
        verbose_name_plural = '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'

    def __str__(self):
        return f'{self.latitude} - {self.longitude}'


class Company(models.Model):
    name = models.CharField(max_length=250,  verbose_name='–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏')

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ö–æ–º–ø–∞–Ω–∏—è'
        verbose_name_plural = '–ö–æ–º–ø–∞–Ω–∏–∏'


class Branch(models.Model):
    branch_name = models.CharField(max_length=250,  verbose_name='–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞')
    latitude = models.CharField(max_length=300,  verbose_name='—à–∏—Ä–æ—Ç–∞')
    longitude = models.CharField(max_length=300,  verbose_name='–¥–æ–ª–≥–æ—Ç–∞')
    address = models.CharField(max_length=300, verbose_name='–∞–¥—Ä–µ—Å', blank=True, null=True)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='brances', verbose_name='–∫–æ–º–ø–∞–Ω–∏—è',
                                blank=True, null=True)

    class Meta:
        verbose_name = '–§–∏–ª–∏–∞–ª'
        verbose_name_plural = '–§–∏–ª–∏–∞–ª—ã'

    def __str__(self):
        return f'{self.branch_name} {self.address}'


class JobRequest(models.Model):
    STATUSES = [
        ('APPROVED', '–ü—Ä–∏–Ω—è—Ç–∞'),
        ('REJECTED', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'),
        ('CANCELED', '–û—Ç–º–µ–Ω–µ–Ω–∞'),
        ('CLOSED', '–ó–∞–∫—Ä—ã—Ç–∞'),
        ('NEW', '–ù–æ–≤–∞—è')
    ]
    REQUEST_TYPES = [
        ('FOR_DATE', '–ù–∞ –¥–∞—Ç—É'),
        ('FOR_PERIOD', '–ù–∞ –ø–µ—Ä–∏–æ–¥')
    ]
    branch = models.ForeignKey(Branch, on_delete=models.CASCADE, related_name='job_requests', verbose_name='—Ñ–∏–ª–∏–∞–ª')
    personalized_request = models.BooleanField(blank=True, null=True, default=False, verbose_name='–∏–º–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞')
    employee_full_name = models.CharField(max_length=300, blank=True, null=True, verbose_name='–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    INN = models.CharField(max_length=12, verbose_name='–ò–ù–ù —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', null=True, blank=True)
    status = models.CharField(max_length=250, choices=STATUSES, blank=True, null=True, verbose_name='—Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏',
                              default='NEW')
    employee_position = models.CharField(blank=True, null=True, max_length=300, verbose_name='–¥–æ–ª–∂–Ω–æ—Å—Ç—å')
    request_type = models.CharField(blank=True, null=True, choices=REQUEST_TYPES, max_length=250, verbose_name='—Ç–∏–ø –∑–∞—è–≤–∫–∏')
    date_start = models.DateField(blank=True, null=True, verbose_name='–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞')
    date_end = models.DateField(blank=True, null=True, verbose_name='–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞')
    shift_time_start = models.TimeField(blank=True, null=True, verbose_name='–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã')
    shift_time_end = models.TimeField(blank=True, null=True, verbose_name='–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã')
    number_of_employees = models.CharField(max_length=3, blank=True, null=True, verbose_name='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
    request_comment = models.TextField(blank=True, null=True, verbose_name='–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    request_date = models.DateTimeField(auto_now=True, verbose_name='–¥–∞—Ç–∞ –∑–∞—è–≤–∫–∏')
    last_notified_date = models.DateField(blank=True, null=True, verbose_name='–¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    last_notification_status = models.CharField(max_length=300, blank=True, null=True, verbose_name='—Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')

    class Meta:
        verbose_name = '–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
        verbose_name_plural = '–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'

    def __str__(self):
        request_date = self.request_date + datetime.timedelta(hours=6)
        date_str = datetime.datetime.strftime(request_date, '%d.%m.%Y %H:%M')
        return f'–ó–∞—è–≤–∫–∞ –æ—Ç {date_str}'

    @admin.display(description='–°—Ç–∞—Ç—É—Å')
    def readable_notification_status(self):
        return statuses_dict[self.last_notification_status] if self.last_notification_status \
                                                               in statuses_dict else self.last_notification_status

    @admin.display(description='–†–∞—Å—Å—ã–ª–∫–∞')
    def readable_broadcast(self):
        date_start = datetime.datetime.strftime(self.date_start, '%d.%m.%Y') if self.date_start else ''
        date_end = datetime.datetime.strftime(self.date_end, '%d.%m.%Y') if self.date_end else ''
        time_start = datetime.time.strftime(self.shift_time_start, '%H:%M') if self.shift_time_start else ''
        time_end = datetime.time.strftime(self.shift_time_end, '%H:%M') if self.shift_time_end else ''

        return format_html(f'{self.branch}<br>üìå{self.employee_position}<br>üïê{time_start} - {time_end}<br>'
                           f'üî¥–î–∞—Ç–∞: {date_start} - {date_end}<br>‚úÖ–û–ø–ª–∞—Ç–∞: 1000 —Ç–Ω–≥/—á–∞—Å')

    def is_shift_includes_time(self, request_date_time, tolerance_minutes=30):
        dates = []
        delta = timedelta(days=1)
        start_date = self.date_start
        while start_date <= self.date_end:
            dates.append(start_date)
            start_date += delta

        for date in dates:
            shift_start = datetime.datetime.combine(date, self.shift_time_start) - timedelta(minutes=tolerance_minutes)
            shift_end = datetime.datetime.combine(date, self.shift_time_end) + timedelta(minutes=tolerance_minutes)
            if shift_end <= shift_start:
                shift_end += delta
            if shift_start <= request_date_time <= shift_end:
                return True
        return False


class JobRequestAssignment(models.Model):
    STATUSES = [
        ('ADMITTED', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'),
        ('NOT ADMITTED', '–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'),
    ]
    job_request = models.ForeignKey(JobRequest, on_delete=models.CASCADE, related_name='assignments',
                                    verbose_name='–∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    status = models.CharField(max_length=250, choices=STATUSES, blank=True, null=True, verbose_name='—Å—Ç–∞—Ç—É—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è')
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name='assignments',
                                 verbose_name='—Å–æ—Ç—Ä—É–¥–Ω–∏–∫')
    assignment_date = models.DateTimeField(auto_now=True, verbose_name='–¥–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è')

    class Meta:
        verbose_name = '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
        verbose_name_plural = '–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'

    def clean(self):
        max_assignments = ((self.job_request.date_end - self.job_request.date_start).days + 1) * int(self.job_request.number_of_employees)

        if self.job_request.assignments.count() >= max_assignments:
            raise ValidationError('–î–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–µ–ª—å–∑—è –±–æ–ª—å—à–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è!')

    def __str__(self):
        date_str = datetime.datetime.strftime(self.assignment_date, '%d.%m.%Y %H:%M')
        return f'–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç {date_str}'

    def get_shift_for_date(self, date):
        for shift in self.shifts.all():
            if shift.shift_date == date:
                return shift
        return None


class Shift(models.Model):
    start_position = models.ForeignKey(EmployeeGeoPosition, on_delete=models.CASCADE, blank=True, null=True,
                                       related_name='start_assignments', verbose_name='–Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã')
    end_position = models.ForeignKey(EmployeeGeoPosition, on_delete=models.CASCADE, blank=True, null=True,
                                     related_name='end_assignments', verbose_name='–æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã')
    shift_date = models.DateField(auto_now=True, verbose_name='–¥–∞—Ç–∞ —Å–º–µ–Ω—ã')
    assignment = models.ForeignKey(JobRequestAssignment, on_delete=models.CASCADE, related_name='shifts',
                                   verbose_name='–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ')

    class Meta:
        verbose_name = '–°–º–µ–Ω–∞'
        verbose_name_plural = '–°–º–µ–Ω—ã'

    def __str__(self):
        date_str = datetime.datetime.strftime(self.shift_date, '%d.%m.%Y %H:%M')
        return f'–°–º–µ–Ω–∞ –æ—Ç {date_str}'


class ProxyShift(Shift):
    class Meta:
        proxy = True
        verbose_name = '–û—Ç—á–µ—Ç'
        verbose_name_plural = '–û—Ç—á–µ—Ç'

    @admin.display(description='—Å–æ—Ç—Ä—É–¥–Ω–∏–∫')
    def readable_employee(self):
        return self.assignment.employee.full_name

    @admin.display(description='–ò–ò–ù')
    def readable_inn(self):
        return self.assignment.employee.INN

    @admin.display(description='—Ñ—É–Ω–∫—Ü–∏—è')
    def readable_position(self):
        return self.assignment.job_request.employee_position

    @admin.display(description='–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç')
    def readable_company(self):
        return self.assignment.job_request.branch.company

    @admin.display(description='–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è')
    def readable_branch(self):
        return self.assignment.job_request.branch

    @admin.display(description='–¥–∞—Ç–∞ —Ç–∞–±–µ–ª—è')
    def readable_date(self):
        return self.shift_date

    @admin.display(description='–ø–ª–∞–Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ —Å–º–µ–Ω—ã')
    def readable_planned_shift_start(self):
        return self.assignment.job_request.shift_time_start

    @admin.display(description='–ø–ª–∞–Ω–æ–≤–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã')
    def readable_planned_shift_end(self):
        return self.assignment.job_request.shift_time_end

    @admin.display(description='–æ—Ç–º–µ—Ç–∫–∞ –Ω–∞ –ø—Ä–∏—Ö–æ–¥')
    def readable_actual_shift_start(self):
        planned_time = self.assignment.job_request.shift_time_start
        if self.start_position:
            actual_time = (self.start_position.geo_positions_date + timedelta(hours=6)).time()
            max_start_time = max(planned_time, actual_time)
        else:
            max_start_time = None
        return max_start_time

    @admin.display(description='–æ—Ç–º–µ—Ç–∫–∞ –Ω–∞ —É—Ö–æ–¥')
    def readable_actual_shift_end(self):
        planned_time = self.assignment.job_request.shift_time_end
        if self.end_position:
            actual_time = (self.end_position.geo_positions_date + timedelta(hours=6)).time()
            min_end_time = min(planned_time, actual_time)
        else:
            min_end_time = None
        return min_end_time


class CustomUser(AbstractUser):
    user_company = models.ForeignKey(Company, on_delete=models.CASCADE, blank=True, null=True, verbose_name='–∫–æ–º–ø–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

    def has_group(self, group_name):
        return self.groups.filter(name=group_name).exists()
