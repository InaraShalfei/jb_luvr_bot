# Generated by Django 4.2.1 on 2023-05-30 04:59

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch_name', models.CharField(max_length=250, verbose_name='название филиала')),
                ('latitude', models.CharField(max_length=300, verbose_name='широта')),
                ('longitude', models.CharField(max_length=300, verbose_name='долгота')),
                ('address', models.CharField(blank=True, max_length=300, null=True, verbose_name='адрес')),
            ],
            options={
                'verbose_name': 'Филиал',
                'verbose_name_plural': 'Филиалы',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=250, verbose_name='номер телефона')),
                ('chat_id', models.IntegerField(blank=True, null=True, verbose_name='ID телеграм чата')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
            },
        ),
        migrations.CreateModel(
            name='EmployeeGeoPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.CharField(max_length=300, verbose_name='широта')),
                ('longitude', models.CharField(max_length=300, verbose_name='долгота')),
                ('geo_positions_date', models.DateField(auto_now=True, verbose_name='дата внесения гео позиций')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geo_positions', to='telegram_bot.employee', verbose_name='сотрудник')),
            ],
            options={
                'verbose_name': 'Геопозиция сотрудника',
                'verbose_name_plural': 'Геопозиция сотрудников',
            },
        ),
        migrations.CreateModel(
            name='JobRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_position', models.CharField(blank=True, max_length=300, null=True, verbose_name='должность')),
                ('request_type', models.CharField(blank=True, max_length=250, null=True, verbose_name='тип заявки')),
                ('date_start', models.DateField(blank=True, null=True, verbose_name='дата начала периода')),
                ('date_end', models.DateField(blank=True, null=True, verbose_name='дата окончания периода')),
                ('shift_time_start', models.TimeField(blank=True, null=True, verbose_name='время начала смены')),
                ('shift_time_end', models.TimeField(blank=True, null=True, verbose_name='время окончания смены')),
                ('number_of_employees', models.CharField(blank=True, max_length=3, null=True, verbose_name='количество сотрудников')),
                ('request_comment', models.TextField(blank=True, null=True, verbose_name='комментарий')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_requests', to='telegram_bot.branch')),
            ],
            options={
                'verbose_name': 'Заявка на сотрудников',
                'verbose_name_plural': 'Заявки на сотрудников',
            },
        ),
        migrations.CreateModel(
            name='JobRequestAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_date', models.DateField(auto_now=True, verbose_name='дата назначения')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='telegram_bot.employee', verbose_name='сотрудник')),
                ('end_position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='end_assignments', to='telegram_bot.employeegeoposition', verbose_name='окончание смены')),
                ('job_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='telegram_bot.jobrequest', verbose_name='заявка на сотрудника')),
                ('start_position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='start_assignments', to='telegram_bot.employeegeoposition', verbose_name='начало смены')),
            ],
            options={
                'verbose_name': 'Назначение сотрудников',
                'verbose_name_plural': 'Назначения сотрудников',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Admin'), (2, 'Magnum')], null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
